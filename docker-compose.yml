version: '3'
# TODO: Secure the dashboard with basic auth
services:
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - "--providers.file.directory=/dynamic-config" 
      - "--providers.file.watch=true"  
      - --entryPoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.email=tofikabdu2002@gmail.com
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --log.level=DEBUG
      - --accesslog=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delayBeforeCheck=30
      # - --certificatesresolvers.cloudflare.acme.dnschallenge.propagation.delayBeforeCheck=30

    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    environment:
      - CF_DNS_API_TOKEN=ozDpwpbSvYNO6SSGaKhZowqoBIFoKSE84QIyydnA

    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - ./letsencrypt:/letsencrypt
      - ./traefik-dynamic:/dynamic-config
    networks:
      - traefik-public

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: FinalYearProjectDb
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      # - internal-network
      - traefik-public
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: app
    depends_on:
      traefik:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: 'postgresql://postgres:postgres@postgres:5432/FinalYearProjectDb?schema=public'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redispass
      NODE_ENV: ${NODE_ENV}
    networks:
      # - internal-network
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    user: root
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.app.rule=(Host(`paas-service.me`) || Host(`www.paas-service.me`))'
      - 'traefik.http.routers.app.entrypoints=websecure'
      - 'traefik.http.routers.app.tls=true'
      - 'traefik.http.routers.app.tls.certresolver=cloudflare'
      - 'traefik.http.routers.app.tls.domains[0].main=paas-service.me'
      - 'traefik.http.routers.app.tls.domains[0].sans=www.paas-service.me'
      - 'traefik.http.services.app.loadbalancer.server.port=3000'

      - 'traefik.http.middlewares.rewrite-host.headers.customRequestHeaders.Host=localhost'
      - 'traefik.http.routers.app.middlewares=rewrite-host'
      - traefik.docker.network=web

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=redispass
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      # - internal-network
      - traefik-public
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  traefik-public:
    external: true
  # internal-network:
  #   driver: bridge

volumes:
  postgres_data:
  node_modules:
  redis_data:
