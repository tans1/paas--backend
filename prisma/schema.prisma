// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db?mode=memory&cache=shared"
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}
enum Role {
  ADMIN
  USER
}

model User {
  id                Int     @id @default(autoincrement())
  name              String 
  email             String  @unique
  password          String?
  role              String?
  githubUsername    String? @unique
  githubAccessToken String? @map("access_token")

  createdAt DateTime @default(now()) @map("created_at")

  projects          Project[]     @relation("UserProjects")
  // dailyUsageCosts DailyUsageCost[]
  dailyUsageMetrics DailyMetric[]

  billingRecords BillingRecord[]
  userAlerts     UserAlert[]
  oauthProviders OAuthProvider[]

  Invoice                 Invoice[]
  status                  UserStatus               @default(ACTIVE)
  suspendedAt             DateTime?
  notifications           Notification[]
  notificationPreferences NotificationPreferences?
    resets    PasswordReset[]
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// model GithubAuth {
//   id             Int    @id @default(autoincrement())
//   githubUsername String @unique

//   accessToken String   @map("access_token")
//   createdAt   DateTime @default(now()) @map("created_at")

//   expired      Boolean?
// }

enum ProjectStatus {
  STOPPED
  RUNNING
  PENDING
}

// add a new schema custom domains
// it needs to reference the project and it needs to have a boolean property 
// live true or false 
model Project {
  id                   Int      @id @default(autoincrement())
  repoId               Int      @map("repo_id")
  branch               String  
  name                 String  
  url                  String  
  framework            String  
  linkedByUser         User     @relation("UserProjects", fields: [linkedByUserId], references: [id])
  linkedByUserId       Int
  createdAt            DateTime @default(now()) @map("created_at")
  environmentVariables Json?    @map("environment_variables")
  deployedIp           String?  @map("deployed_ip")
  deployedPort         Int?     @map("deployed_port")
  deployedUrl          String?  @map("deployedUrl")

  deployments        Deployment[]
  activeDeploymentId Int?         @map("active_deployment_id")

  localRepoPath String? @map("local_repo_path")
  zoneId String? @map("zone_id")
  aRecordId String? @map("a_name_record_id")
  cnameRecordId String? @map("cname_record_id")
  installCommand String?  
  buildCommand String?  
  runCommand String?  
  outputDirectory String?  
  rootDirectory String?  
  projectDescription String?
  lastCommitMessage String 
  status ProjectStatus  @default(PENDING)
  dockerComposeFile String?
  PORT Int?
  customDomains CustomDomain[]
  @@unique([repoId, branch], name: "repoId_branch")
}

model CustomDomain {
  id         Int      @id @default(autoincrement())
  domain     String   @unique
  live       Boolean  @default(false)
  createdAt  DateTime @default(now())

  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
}


// imageName
// containerName
model Deployment {
  id                    Int          @id @default(autoincrement())
  project                  Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                Int
  status                String      
  branch                String      
  environmentVariables  Json?        @map("environment_variables")
  rollbackTo            Deployment?  @relation("Rollback", fields: [rollbackToId], references: [id])
  rollbackToId          Int?         @map("rollback_to_id")
  rollbackedDeployments Deployment[] @relation("Rollback")
  containerName       String?      @map("container_name")
  imageName           String?      @map("image_name")
  createdAt DateTime        @default(now()) @map("created_at")
  lastCommitMessage String
  logs      DeploymentLog[]
  extension String
}

model DeploymentLog {
  id           Int        @id @default(autoincrement())
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  deploymentId Int
  logLevel     String     @map("log_level")
  message      String
  timestamp    DateTime   @default(now()) @map("timestamp")
  logType      String     @map("log_type")
}

model Server {
  id                 Int      @id @default(autoincrement())
  resourceUsage      Json?    @map("resource_usage")
  hostedApplications Json?    @map("hosted_applications")
  createdAt          DateTime @default(now()) @map("created_at")
}

model UserAlert {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      String  
  createdAt DateTime @default(now()) @map("created_at")
}

model AdminAnalytics {
  id        Int      @id @default(autoincrement())
  metric    String  
  value     Json?
  createdAt DateTime @default(now()) @map("created_at")
}

model OAuthProvider {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  provider    String? 
  accessToken String   @map("access_token")
  createdAt   DateTime @default(now()) @map("created_at")
}

// model DailyUsageCost {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int

//   amount Float
//   // status        PaymentTypes

//   // recentPaidAmount Float @default(0.0)
//   updatedAt DateTime @updatedAt
// }

model DailyMetric {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId Int

  containerName String

  date DateTime

  amount Float

  cpuSeconds  Float
  memoryBytes BigInt
  netRxBytes  BigInt
  netTxBytes  BigInt
}

// model MonthlyAggregate {
//   id            String   @id @default(cuid())
//   containerName String
//   periodStart   DateTime
//   periodEnd     DateTime
//   totalCpuSecs  Float
//   totalMemGbHrs Float
//   totalNetBytes BigInt
// }

model Invoice {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId Int

  amount      Float
  status      String
  dueDate     DateTime
  updatedAt   DateTime @updatedAt
  paymentLink String?
  TxRef       String?

  @@index([userId])
}

enum BillingTypes {
  PAID
  PENDING
  FAILED
}

model BillingRecord {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  amount Float
  status BillingTypes
  createdAt DateTime @default(now())
}

enum NotificationType {
  SYSTEM
  DEPLOYMENT
  SECURITY
  UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

model Notification {
  id        String               @id @default(uuid())
  title     String
  message   String              
  type      NotificationType     @default(SYSTEM)
  priority  NotificationPriority @default(MEDIUM)
  isRead    Boolean              @default(false)
  user      User?                @relation(fields: [userId], references: [id])
  userId    Int?
  metadata  Json?
  createdAt DateTime             @default(now()) @map("created_at")
  readAt    DateTime?            @map("read_at")
}

model NotificationPreferences {
  id                 String               @id @default(uuid())
  user               User                 @relation(fields: [userId], references: [id])
  userId             Int                  @unique
  enabledTypes       Json // Stores { SYSTEM: boolean, DEPLOYMENT: boolean, etc. }
  emailNotifications Boolean              @default(true)
  pushNotifications  Boolean              @default(true)
  inAppNotifications Boolean              @default(true)
  minimumPriority    NotificationPriority @default(MEDIUM)
  notifyOnDeployment Boolean              @default(true)
  notifyOnSecurity   Boolean              @default(true)
  notifyOnSystem     Boolean              @default(true)
  notifyOnUpdate     Boolean              @default(true)
}
